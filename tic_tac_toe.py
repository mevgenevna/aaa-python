def define_field_size():
    '''Gets field size from user'''
    print('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è –æ—Ç 3 –¥–æ 5:')
    N = input()
    while N not in ['3', '4', '5']:
        print('–†–∞–∑–º–µ—Ä –ø–æ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 5:')
        N = input()
    N = int(N)
    return create_field(N)


def create_field(size):
    '''Creates field with a given size'''
    field = []
    n = 0
    while n < size:
        r = []
        field.append(r)
        i = 0
        while i < size:
            field[n].append(' ')
            i += 1
        n += 1
    return show_field(field, 1)


def show_field(f, call_player):
    '''Displays current field. If call_player = 1 causes first player turn'''
    N = len(f)
    letters = ['a', 'b', 'c', 'd', 'e']
    # header = ' '
    header = ''
    i = 1
    while i <= N:
        header = header + '  ' + str(i) + ' '
        # header += str(i)
        i += 1
    print(header)
    n = 0
    while n < N:
        row = letters[n]
        i = 0
        while i < N:
            if i == 0:
                row = row + ' ' + f[n][i]
                i += 1
            else:
                row = row + ' | ' + f[n][i]
                i += 1
        print(row)
        if n != N - 1:
            print(' ' + '-' * (4 * N - 1))
        n += 1
    if call_player == 1:
        return player1(f)


def player1(f):
    '''Gets coordinates from first user and fills cell with x'''
    N = len(f)
    options = []
    n = 1
    while n <= N:
        i = 1
        while i <= N:
            options.append(str(n) + ' ' + str(i))
            i += 1
        n += 1

    print('–•–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:')
    answer = input()

    while answer not in options:
        print(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: 1 2. –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ ' + str(
                N))
        answer = input()

    n, i = answer.split()
    n = int(n)
    i = int(i)
    if f[n - 1][i - 1] == ' ':
        f[n - 1][i - 1] = 'x'
        # print(f)
        show_field(f, 0)
        return checking(f, p=1)
    else:
        print('–≠—Ç–∞ —è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return player1(f)


def player2(f):
    '''Gets coordinates from second user and fills cell with o'''
    N = len(f)
    options = []
    n = 1
    while n <= N:
        i = 1
        while i <= N:
            options.append(str(n) + ' ' + str(i))
            i += 1
        n += 1

    print('–•–æ–¥ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:')
    answer = input()
    while answer not in options:
        print(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: 1 2. –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ ' + str(
                N))
        answer = input()
    n, i = answer.split()
    n = int(n)
    i = int(i)
    if f[n - 1][i - 1] == ' ':
        f[n - 1][i - 1] = 'o'
        # print(f)
        show_field(f, 0)
        return checking(f, p=2)
    else:
        print('–≠—Ç–∞ —è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return player2(f)


def checking(f, p):
    '''Checks if sb. won. Checks if there are any empty cells. Shows result'''
    N = len(f)
    # —Å—É–º–º–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    n = 0
    while n < N:
        i = 0
        x = 0
        o = 0
        while i < N:
            if f[n][i] == 'x':
                x += 1
            elif f[n][i] == 'o':
                o += 1
            i += 1
        if x == N:
            return print('–ü–æ–±–µ–¥–∏–ª –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫! üéâ')
            # print('–ü–æ–±–µ–¥–∏–ª –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫! üéâ')
            break
        elif o == N:
            return print('–ü–æ–±–µ–¥–∏–ª –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫! üéâ')
            # print('–ü–æ–±–µ–¥–∏–ª –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫! üéâ')
            break
        else:
            n += 1

    # —Å—É–º–º–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
    n = 0
    while n < N:
        i = 0
        x = 0
        o = 0
        while i < N:
            if f[i][n] == 'x':
                x += 1
            elif f[i][n] == 'o':
                o += 1
            i += 1
        if x == N:
            return print('–ü–æ–±–µ–¥–∏–ª –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫! üéâ')
            # print('–ü–æ–±–µ–¥–∏–ª –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫! üéâ')
            break
        elif o == N:
            return print('–ü–æ–±–µ–¥–∏–ª –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫! üéâ')
            # print('–ü–æ–±–µ–¥–∏–ª –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫! üéâ')
            break
        else:
            n += 1

    # —Å—É–º–º–∞ –¥–æ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º
    n = 0
    x = 0
    o = 0
    while n < N:
        if f[n][n] == 'x':
            x += 1
        elif f[n][n] == 'o':
            o += 1
        n += 1
    if x == N:
        return print('–ü–æ–±–µ–¥–∏–ª –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫! üéâ')
        # print('–ü–æ–±–µ–¥–∏–ª –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫! üéâ')
    elif o == N:
        return print('–ü–æ–±–µ–¥–∏–ª –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫! üéâ')
        # print('–ü–æ–±–µ–¥–∏–ª –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫! üéâ')

    n = 0
    x = 0
    o = 0
    while n < N:
        if f[N - 1 - n][n] == 'x':
            x += 1
        elif f[N - 1 - n][n] == 'o':
            o += 1
        n += 1
    if x == N:
        return print('–ü–æ–±–µ–¥–∏–ª –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫! üéâ')
        # print('–ü–æ–±–µ–¥–∏–ª –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫! üéâ')
    elif o == N:
        return print('–ü–æ–±–µ–¥–∏–ª –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫! üéâ')
        # print('–ü–æ–±–µ–¥–∏–ª –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫! üéâ')

    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
    n = 0
    empty = 0
    while n < N:
        i = 0
        while i < N:
            if f[i][n] == ' ':
                empty += 1
            i += 1
        n += 1
    if empty == 0:
        return print('–°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç. –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.')
    elif p == 1:
        return player2(f)
    elif p == 2:
        return player1(f)
    else:
        return print('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


if __name__ == '__main__':
    define_field_size()
